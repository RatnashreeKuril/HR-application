package com.thinking.machines.hr.pl.model;
import com.thinking.machines.hr.bl.interfaces.managers.*;
import com.thinking.machines.hr.bl.interfaces.pojo.*;
import com.thinking.machines.hr.bl.managers.*;
import com.thinking.machines.hr.bl.pojo.*;
import com.thinking.machines.hr.bl.exceptions.*;
import java.util.*;
import javax.swing.table.*;
public class DesignationModel extends AbstractTableModel
{
private DesignationManagerInterface designationManager;
private List<DesignationInterface> designations;
private String title[];
public DesignationModel()
{
populateDataStructure();
System.out.println("Constructor");
}
private void populateDataStructure()
{
System.out.println("populateDataStructure");
title=new String[2];
title[0]="S.No.";
title[1]="Designation";
designations=new LinkedList<>();
try
{
designationManager=DesignationManager.getDesignationManager();
}catch(BLException blException)
{

}
Set<DesignationInterface> blDesignations=designationManager.getDesignations();
for(DesignationInterface designation:blDesignations)
{
designations.add(designation);
}
Collections.sort(this.designations,new Comparator<DesignationInterface>(){
public int compare(DesignationInterface left, DesignationInterface right)
{
return left.getTitle().toUpperCase().compareTo(right.getTitle().toUpperCase());
}
});
}
public int getColumnCount()
{
return title.length;
}
public int getRowCount()
{
return designations.size();
}
public String getColumnName(int columnIndex)
{
return title[columnIndex];
}
public Class getColumnClass(int columnIndex)
{
if(columnIndex==0) return Integer.class;
return String.class;
}
public Object getValueAt(int rowIndex, int columnIndex)
{
if(columnIndex==0) return rowIndex+1;
return designations.get(rowIndex).getTitle();
}
public boolean isCellEditable(int rowIndex, int columnIndex)
{
return false;
}
// Application Specific Methods
public void add(DesignationInterface designation) throws BLException
{
this.designationManager.addDesignation(designation);
this.designations.add(designation);
Collections.sort(this.designations,new Comparator<DesignationInterface>(){
public int compare(DesignationInterface left, DesignationInterface right)
{
return left.getTitle().toUpperCase().compareTo(right.getTitle().toUpperCase());
}
});
fireTableDataChanged();
}
public void update(DesignationInterface designation) throws BLException
{
this.designationManager.updateDesignation(designation);
this.designations.remove(indexOfDesignation(designation));
this.designations.add(designation);
Collections.sort(this.designations,new Comparator<DesignationInterface>(){
public int compare(DesignationInterface left, DesignationInterface right)
{
return left.getTitle().toUpperCase().compareTo(right.getTitle().toUpperCase());
}
});
fireTableDataChanged();
}
public void remove(int code) throws BLException
{
this.designationManager.removeDesignation(code);
Iterator<DesignationInterface> iterator=this.designations.iterator();
int index=0;
while(iterator.hasNext())
{
if(iterator.next().getCode()==code) break;
index++;
}
if(index==this.designations.size())
{
BLException blException=new BLException();
blException.setGenericException("Invalid designation code : "+code);
throw blException;
}
this.designations.remove(index);
fireTableDataChanged();
}
public int indexOfDesignation(DesignationInterface designation) throws BLException
{
Iterator<DesignationInterface> iterator;
iterator=this.designations.iterator();
DesignationInterface d;
int index=0;
while(iterator.hasNext())
{
d=iterator.next();
if(designation.equals(d))
{
return index;
}
index++;
}

BLException blException=new BLException();
blException.setGenericException("Invalid designation : "+designation.getTitle());
throw blException;

}

public int indexOfTitle(String title, boolean partialLeftSearch) throws BLException
{
Iterator<DesignationInterface> iterator;
iterator=designations.iterator();
DesignationInterface d;
int index=0;
while(iterator.hasNext())
{
d=iterator.next();
if(partialLeftSearch==true)
{
if(d.getTitle().toUpperCase().startsWith(title.toUpperCase())) return index;
}
else if(d.getTitle().equalsIgnoreCase(title)) return index;
index++;
}

BLException blException=new BLException();
blException.setGenericException("Invalid title : "+title);
throw blException;
}

}